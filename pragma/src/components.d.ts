/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  Field,
} from './types';

export namespace Components {
  interface PragmaBoolean {
    /**
    * Whether the field is disabled.
    */
    'disabled': boolean;
    /**
    * Pragma field definition.
    */
    'field': Field | string | any;
    /**
    * The field's label.
    */
    'label': string;
    /**
    * The field's path.
    */
    'path': string;
    /**
    * The field's value.
    */
    'value': boolean;
  }
  interface PragmaGroup {
    /**
    * Pragma field definition.
    */
    'field': Field | string | any;
    /**
    * Whether to hide the field's label.
    */
    'hideLabel': boolean;
    /**
    * The field's label.
    */
    'label': string;
    /**
    * The field's path.
    */
    'path': string;
  }
  interface PragmaNumber {
    /**
    * Whether the field is disabled.
    */
    'disabled': boolean;
    /**
    * Pragma field definition.  TODO: Field definition type.
    */
    'field': Field | string | any;
    /**
    * The field's label.
    */
    'label': string;
    /**
    * The maximum value constraint.
    */
    'max': number;
    /**
    * The minimum value constraint.
    */
    'min': number;
    /**
    * The field's path.
    */
    'path': string;
    /**
    * The value step.
    */
    'step': number;
    /**
    * The field's value.
    */
    'value': number;
  }
  interface PragmaSection {
    'field': any;
  }
  interface PragmaString {
    /**
    * Whether the field is disabled.
    */
    'disabled': boolean;
    /**
    * Pragma field definition.
    */
    'field': Field | string | any;
    /**
    * The field's label.
    */
    'label': string;
    /**
    * The field's path.
    */
    'path': string;
    /**
    * The field's value.
    */
    'value': string;
  }
  interface PragmaTree {
    /**
    * The children of the root node of the tree.
    */
    'fields': Array<any>;
  }
}

declare global {


  interface HTMLPragmaBooleanElement extends Components.PragmaBoolean, HTMLStencilElement {}
  const HTMLPragmaBooleanElement: {
    prototype: HTMLPragmaBooleanElement;
    new (): HTMLPragmaBooleanElement;
  };

  interface HTMLPragmaGroupElement extends Components.PragmaGroup, HTMLStencilElement {}
  const HTMLPragmaGroupElement: {
    prototype: HTMLPragmaGroupElement;
    new (): HTMLPragmaGroupElement;
  };

  interface HTMLPragmaNumberElement extends Components.PragmaNumber, HTMLStencilElement {}
  const HTMLPragmaNumberElement: {
    prototype: HTMLPragmaNumberElement;
    new (): HTMLPragmaNumberElement;
  };

  interface HTMLPragmaSectionElement extends Components.PragmaSection, HTMLStencilElement {}
  const HTMLPragmaSectionElement: {
    prototype: HTMLPragmaSectionElement;
    new (): HTMLPragmaSectionElement;
  };

  interface HTMLPragmaStringElement extends Components.PragmaString, HTMLStencilElement {}
  const HTMLPragmaStringElement: {
    prototype: HTMLPragmaStringElement;
    new (): HTMLPragmaStringElement;
  };

  interface HTMLPragmaTreeElement extends Components.PragmaTree, HTMLStencilElement {}
  const HTMLPragmaTreeElement: {
    prototype: HTMLPragmaTreeElement;
    new (): HTMLPragmaTreeElement;
  };
  interface HTMLElementTagNameMap {
    'pragma-boolean': HTMLPragmaBooleanElement;
    'pragma-group': HTMLPragmaGroupElement;
    'pragma-number': HTMLPragmaNumberElement;
    'pragma-section': HTMLPragmaSectionElement;
    'pragma-string': HTMLPragmaStringElement;
    'pragma-tree': HTMLPragmaTreeElement;
  }
}

declare namespace LocalJSX {
  interface PragmaBoolean {
    /**
    * Whether the field is disabled.
    */
    'disabled'?: boolean;
    /**
    * Pragma field definition.
    */
    'field'?: Field | string | any;
    /**
    * The field's label.
    */
    'label'?: string;
    /**
    * The field's path.
    */
    'path'?: string;
    /**
    * The field's value.
    */
    'value'?: boolean;
  }
  interface PragmaGroup {
    /**
    * Pragma field definition.
    */
    'field'?: Field | string | any;
    /**
    * Whether to hide the field's label.
    */
    'hideLabel'?: boolean;
    /**
    * The field's label.
    */
    'label'?: string;
    /**
    * The field's path.
    */
    'path'?: string;
  }
  interface PragmaNumber {
    /**
    * Whether the field is disabled.
    */
    'disabled'?: boolean;
    /**
    * Pragma field definition.  TODO: Field definition type.
    */
    'field'?: Field | string | any;
    /**
    * The field's label.
    */
    'label'?: string;
    /**
    * The maximum value constraint.
    */
    'max'?: number;
    /**
    * The minimum value constraint.
    */
    'min'?: number;
    /**
    * The field's path.
    */
    'path'?: string;
    /**
    * The value step.
    */
    'step'?: number;
    /**
    * The field's value.
    */
    'value'?: number;
  }
  interface PragmaSection {
    'field'?: any;
  }
  interface PragmaString {
    /**
    * Whether the field is disabled.
    */
    'disabled'?: boolean;
    /**
    * Pragma field definition.
    */
    'field'?: Field | string | any;
    /**
    * The field's label.
    */
    'label'?: string;
    /**
    * The field's path.
    */
    'path'?: string;
    /**
    * The field's value.
    */
    'value'?: string;
  }
  interface PragmaTree {
    /**
    * The children of the root node of the tree.
    */
    'fields'?: Array<any>;
  }

  interface IntrinsicElements {
    'pragma-boolean': PragmaBoolean;
    'pragma-group': PragmaGroup;
    'pragma-number': PragmaNumber;
    'pragma-section': PragmaSection;
    'pragma-string': PragmaString;
    'pragma-tree': PragmaTree;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'pragma-boolean': LocalJSX.PragmaBoolean & JSXBase.HTMLAttributes<HTMLPragmaBooleanElement>;
      'pragma-group': LocalJSX.PragmaGroup & JSXBase.HTMLAttributes<HTMLPragmaGroupElement>;
      'pragma-number': LocalJSX.PragmaNumber & JSXBase.HTMLAttributes<HTMLPragmaNumberElement>;
      'pragma-section': LocalJSX.PragmaSection & JSXBase.HTMLAttributes<HTMLPragmaSectionElement>;
      'pragma-string': LocalJSX.PragmaString & JSXBase.HTMLAttributes<HTMLPragmaStringElement>;
      'pragma-tree': LocalJSX.PragmaTree & JSXBase.HTMLAttributes<HTMLPragmaTreeElement>;
    }
  }
}


